/*
 * Public EMMA API
 *
 * ### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing VmMonitoringResponse
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class VmMonitoringResponseTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for VmMonitoringResponse
        //private VmMonitoringResponse instance;

        public VmMonitoringResponseTests()
        {
            // TODO uncomment below to create an instance of VmMonitoringResponse
            //instance = new VmMonitoringResponse();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VmMonitoringResponse
        /// </summary>
        [Fact]
        public void VmMonitoringResponseInstanceTest()
        {
            // TODO uncomment below to test "IsType" VmMonitoringResponse
            //Assert.IsType<VmMonitoringResponse>(instance);
        }

        /// <summary>
        /// Test the property 'Timecode'
        /// </summary>
        [Fact]
        public void TimecodeTest()
        {
            // TODO unit test for the property 'Timecode'
        }

        /// <summary>
        /// Test the property 'CpuDataPresent'
        /// </summary>
        [Fact]
        public void CpuDataPresentTest()
        {
            // TODO unit test for the property 'CpuDataPresent'
        }

        /// <summary>
        /// Test the property 'CpuUtilizationAverageCores'
        /// </summary>
        [Fact]
        public void CpuUtilizationAverageCoresTest()
        {
            // TODO unit test for the property 'CpuUtilizationAverageCores'
        }

        /// <summary>
        /// Test the property 'AvgCpuUtilizationAverageCores'
        /// </summary>
        [Fact]
        public void AvgCpuUtilizationAverageCoresTest()
        {
            // TODO unit test for the property 'AvgCpuUtilizationAverageCores'
        }

        /// <summary>
        /// Test the property 'MaxCpuUtilizationAverageCores'
        /// </summary>
        [Fact]
        public void MaxCpuUtilizationAverageCoresTest()
        {
            // TODO unit test for the property 'MaxCpuUtilizationAverageCores'
        }

        /// <summary>
        /// Test the property 'CpuTotalPercent'
        /// </summary>
        [Fact]
        public void CpuTotalPercentTest()
        {
            // TODO unit test for the property 'CpuTotalPercent'
        }

        /// <summary>
        /// Test the property 'CpuHumanLabel'
        /// </summary>
        [Fact]
        public void CpuHumanLabelTest()
        {
            // TODO unit test for the property 'CpuHumanLabel'
        }

        /// <summary>
        /// Test the property 'RamDataPresent'
        /// </summary>
        [Fact]
        public void RamDataPresentTest()
        {
            // TODO unit test for the property 'RamDataPresent'
        }

        /// <summary>
        /// Test the property 'RamUsageAverageGb'
        /// </summary>
        [Fact]
        public void RamUsageAverageGbTest()
        {
            // TODO unit test for the property 'RamUsageAverageGb'
        }

        /// <summary>
        /// Test the property 'AvgRamUsageAverageGb'
        /// </summary>
        [Fact]
        public void AvgRamUsageAverageGbTest()
        {
            // TODO unit test for the property 'AvgRamUsageAverageGb'
        }

        /// <summary>
        /// Test the property 'MaxRamUsageAverageGb'
        /// </summary>
        [Fact]
        public void MaxRamUsageAverageGbTest()
        {
            // TODO unit test for the property 'MaxRamUsageAverageGb'
        }

        /// <summary>
        /// Test the property 'RamTotalAmountGb'
        /// </summary>
        [Fact]
        public void RamTotalAmountGbTest()
        {
            // TODO unit test for the property 'RamTotalAmountGb'
        }

        /// <summary>
        /// Test the property 'RamHumanLabel'
        /// </summary>
        [Fact]
        public void RamHumanLabelTest()
        {
            // TODO unit test for the property 'RamHumanLabel'
        }

        /// <summary>
        /// Test the property 'DiskUsedDataPresent'
        /// </summary>
        [Fact]
        public void DiskUsedDataPresentTest()
        {
            // TODO unit test for the property 'DiskUsedDataPresent'
        }

        /// <summary>
        /// Test the property 'DiskSpaceUsedGb'
        /// </summary>
        [Fact]
        public void DiskSpaceUsedGbTest()
        {
            // TODO unit test for the property 'DiskSpaceUsedGb'
        }

        /// <summary>
        /// Test the property 'AvgDiskSpaceUsedGb'
        /// </summary>
        [Fact]
        public void AvgDiskSpaceUsedGbTest()
        {
            // TODO unit test for the property 'AvgDiskSpaceUsedGb'
        }

        /// <summary>
        /// Test the property 'MaxDiskSpaceUsedGb'
        /// </summary>
        [Fact]
        public void MaxDiskSpaceUsedGbTest()
        {
            // TODO unit test for the property 'MaxDiskSpaceUsedGb'
        }

        /// <summary>
        /// Test the property 'DiskSpaceTotalGb'
        /// </summary>
        [Fact]
        public void DiskSpaceTotalGbTest()
        {
            // TODO unit test for the property 'DiskSpaceTotalGb'
        }

        /// <summary>
        /// Test the property 'DiskSpaceHumanLabel'
        /// </summary>
        [Fact]
        public void DiskSpaceHumanLabelTest()
        {
            // TODO unit test for the property 'DiskSpaceHumanLabel'
        }

        /// <summary>
        /// Test the property 'DiskWriteDataPresent'
        /// </summary>
        [Fact]
        public void DiskWriteDataPresentTest()
        {
            // TODO unit test for the property 'DiskWriteDataPresent'
        }

        /// <summary>
        /// Test the property 'DiskWriteCoef'
        /// </summary>
        [Fact]
        public void DiskWriteCoefTest()
        {
            // TODO unit test for the property 'DiskWriteCoef'
        }

        /// <summary>
        /// Test the property 'DiskWriteHuman'
        /// </summary>
        [Fact]
        public void DiskWriteHumanTest()
        {
            // TODO unit test for the property 'DiskWriteHuman'
        }

        /// <summary>
        /// Test the property 'AvgDiskWriteHuman'
        /// </summary>
        [Fact]
        public void AvgDiskWriteHumanTest()
        {
            // TODO unit test for the property 'AvgDiskWriteHuman'
        }

        /// <summary>
        /// Test the property 'MaxDiskWriteHuman'
        /// </summary>
        [Fact]
        public void MaxDiskWriteHumanTest()
        {
            // TODO unit test for the property 'MaxDiskWriteHuman'
        }

        /// <summary>
        /// Test the property 'DiskWriteHumanLabel'
        /// </summary>
        [Fact]
        public void DiskWriteHumanLabelTest()
        {
            // TODO unit test for the property 'DiskWriteHumanLabel'
        }

        /// <summary>
        /// Test the property 'DiskReadDataPresent'
        /// </summary>
        [Fact]
        public void DiskReadDataPresentTest()
        {
            // TODO unit test for the property 'DiskReadDataPresent'
        }

        /// <summary>
        /// Test the property 'DiskReadCoef'
        /// </summary>
        [Fact]
        public void DiskReadCoefTest()
        {
            // TODO unit test for the property 'DiskReadCoef'
        }

        /// <summary>
        /// Test the property 'DiskReadHuman'
        /// </summary>
        [Fact]
        public void DiskReadHumanTest()
        {
            // TODO unit test for the property 'DiskReadHuman'
        }

        /// <summary>
        /// Test the property 'AvgDiskReadHuman'
        /// </summary>
        [Fact]
        public void AvgDiskReadHumanTest()
        {
            // TODO unit test for the property 'AvgDiskReadHuman'
        }

        /// <summary>
        /// Test the property 'MaxDiskReadHuman'
        /// </summary>
        [Fact]
        public void MaxDiskReadHumanTest()
        {
            // TODO unit test for the property 'MaxDiskReadHuman'
        }

        /// <summary>
        /// Test the property 'DiskReadHumanLabel'
        /// </summary>
        [Fact]
        public void DiskReadHumanLabelTest()
        {
            // TODO unit test for the property 'DiskReadHumanLabel'
        }

        /// <summary>
        /// Test the property 'NetworkOutDataPresent'
        /// </summary>
        [Fact]
        public void NetworkOutDataPresentTest()
        {
            // TODO unit test for the property 'NetworkOutDataPresent'
        }

        /// <summary>
        /// Test the property 'NetworkOutCoef'
        /// </summary>
        [Fact]
        public void NetworkOutCoefTest()
        {
            // TODO unit test for the property 'NetworkOutCoef'
        }

        /// <summary>
        /// Test the property 'NetworkOutHuman'
        /// </summary>
        [Fact]
        public void NetworkOutHumanTest()
        {
            // TODO unit test for the property 'NetworkOutHuman'
        }

        /// <summary>
        /// Test the property 'AvgNetworkOutHuman'
        /// </summary>
        [Fact]
        public void AvgNetworkOutHumanTest()
        {
            // TODO unit test for the property 'AvgNetworkOutHuman'
        }

        /// <summary>
        /// Test the property 'MaxNetworkOutHuman'
        /// </summary>
        [Fact]
        public void MaxNetworkOutHumanTest()
        {
            // TODO unit test for the property 'MaxNetworkOutHuman'
        }

        /// <summary>
        /// Test the property 'NetworkOutHumanLabel'
        /// </summary>
        [Fact]
        public void NetworkOutHumanLabelTest()
        {
            // TODO unit test for the property 'NetworkOutHumanLabel'
        }

        /// <summary>
        /// Test the property 'NetworkInDataPresent'
        /// </summary>
        [Fact]
        public void NetworkInDataPresentTest()
        {
            // TODO unit test for the property 'NetworkInDataPresent'
        }

        /// <summary>
        /// Test the property 'NetworkInCoef'
        /// </summary>
        [Fact]
        public void NetworkInCoefTest()
        {
            // TODO unit test for the property 'NetworkInCoef'
        }

        /// <summary>
        /// Test the property 'NetworkInHuman'
        /// </summary>
        [Fact]
        public void NetworkInHumanTest()
        {
            // TODO unit test for the property 'NetworkInHuman'
        }

        /// <summary>
        /// Test the property 'AvgNetworkInHuman'
        /// </summary>
        [Fact]
        public void AvgNetworkInHumanTest()
        {
            // TODO unit test for the property 'AvgNetworkInHuman'
        }

        /// <summary>
        /// Test the property 'MaxNetworkInHuman'
        /// </summary>
        [Fact]
        public void MaxNetworkInHumanTest()
        {
            // TODO unit test for the property 'MaxNetworkInHuman'
        }

        /// <summary>
        /// Test the property 'NetworkInHumanLabel'
        /// </summary>
        [Fact]
        public void NetworkInHumanLabelTest()
        {
            // TODO unit test for the property 'NetworkInHumanLabel'
        }
    }
}
