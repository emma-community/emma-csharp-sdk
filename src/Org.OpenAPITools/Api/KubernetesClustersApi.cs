/*
 * Public EMMA API
 *
 * ### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKubernetesClustersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Kubernetes&gt;</returns>
        List<Kubernetes> CreateKubernetesCluster(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0);

        /// <summary>
        /// Create Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Kubernetes&gt;</returns>
        ApiResponse<List<Kubernetes>> CreateKubernetesClusterWithHttpInfo(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0);
        /// <summary>
        /// Delete Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Kubernetes</returns>
        Kubernetes DeleteKubernetesCluster(int kubernetesId, int operationIndex = 0);

        /// <summary>
        /// Delete Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Kubernetes</returns>
        ApiResponse<Kubernetes> DeleteKubernetesClusterWithHttpInfo(int kubernetesId, int operationIndex = 0);
        /// <summary>
        /// Edit Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Kubernetes</returns>
        Kubernetes EditKubernetesCluster(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0);

        /// <summary>
        /// Edit Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Kubernetes</returns>
        ApiResponse<Kubernetes> EditKubernetesClusterWithHttpInfo(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0);
        /// <summary>
        /// Get Kubernetes cluster by id
        /// </summary>
        /// <remarks>
        /// Returns a Managed Kubernetes cluster by cluster ID. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Kubernetes</returns>
        Kubernetes GetKubernetesCluster(int kubernetesId, int operationIndex = 0);

        /// <summary>
        /// Get Kubernetes cluster by id
        /// </summary>
        /// <remarks>
        /// Returns a Managed Kubernetes cluster by cluster ID. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Kubernetes</returns>
        ApiResponse<Kubernetes> GetKubernetesClusterWithHttpInfo(int kubernetesId, int operationIndex = 0);
        /// <summary>
        /// Get list of Kubernetes clusters
        /// </summary>
        /// <remarks>
        /// Returns a list of created Kubernetes clusters. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Kubernetes&gt;</returns>
        List<Kubernetes> GetKubernetesClusters(int operationIndex = 0);

        /// <summary>
        /// Get list of Kubernetes clusters
        /// </summary>
        /// <remarks>
        /// Returns a list of created Kubernetes clusters. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Kubernetes&gt;</returns>
        ApiResponse<List<Kubernetes>> GetKubernetesClustersWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKubernetesClustersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Kubernetes&gt;</returns>
        System.Threading.Tasks.Task<List<Kubernetes>> CreateKubernetesClusterAsync(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Kubernetes&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Kubernetes>>> CreateKubernetesClusterWithHttpInfoAsync(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Kubernetes</returns>
        System.Threading.Tasks.Task<Kubernetes> DeleteKubernetesClusterAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Kubernetes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Kubernetes>> DeleteKubernetesClusterWithHttpInfoAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Kubernetes</returns>
        System.Threading.Tasks.Task<Kubernetes> EditKubernetesClusterAsync(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit Kubernetes cluster
        /// </summary>
        /// <remarks>
        /// The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Kubernetes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Kubernetes>> EditKubernetesClusterWithHttpInfoAsync(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Kubernetes cluster by id
        /// </summary>
        /// <remarks>
        /// Returns a Managed Kubernetes cluster by cluster ID. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Kubernetes</returns>
        System.Threading.Tasks.Task<Kubernetes> GetKubernetesClusterAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Kubernetes cluster by id
        /// </summary>
        /// <remarks>
        /// Returns a Managed Kubernetes cluster by cluster ID. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Kubernetes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Kubernetes>> GetKubernetesClusterWithHttpInfoAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get list of Kubernetes clusters
        /// </summary>
        /// <remarks>
        /// Returns a list of created Kubernetes clusters. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Kubernetes&gt;</returns>
        System.Threading.Tasks.Task<List<Kubernetes>> GetKubernetesClustersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get list of Kubernetes clusters
        /// </summary>
        /// <remarks>
        /// Returns a list of created Kubernetes clusters. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Kubernetes&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Kubernetes>>> GetKubernetesClustersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKubernetesClustersApi : IKubernetesClustersApiSync, IKubernetesClustersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KubernetesClustersApi : IKubernetesClustersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClustersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KubernetesClustersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClustersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KubernetesClustersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClustersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KubernetesClustersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClustersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public KubernetesClustersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Kubernetes cluster Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Kubernetes&gt;</returns>
        public List<Kubernetes> CreateKubernetesCluster(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>> localVarResponse = CreateKubernetesClusterWithHttpInfo(kubernetesCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Kubernetes cluster Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Kubernetes&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>> CreateKubernetesClusterWithHttpInfo(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kubernetesCreate;

            localVarRequestOptions.Operation = "KubernetesClustersApi.CreateKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Kubernetes>>("/v1/kubernetes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Kubernetes cluster Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Kubernetes&gt;</returns>
        public async System.Threading.Tasks.Task<List<Kubernetes>> CreateKubernetesClusterAsync(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>> localVarResponse = await CreateKubernetesClusterWithHttpInfoAsync(kubernetesCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Kubernetes cluster Creates a Managed Kubernetes cluster. Kubernetes Service provides you with the ability to deploy and manage Kubernetes clusters without worrying about the setup and maintenance of master nodes. emma takes care of managing the Kubernetes control planes, allowing you to focus on deploying and managing your applications. You don&#39;t need to create master nodes.   We offer a reliable and highly available infrastructure for your cluster, which is hosted across three cloud providers: **Amazon Web Services (AWS), Microsoft Azure,** and **Google Cloud Platform (GCP)**. The service ensures independence from a single cloud provider. You can deploy your cluster across the networks of three providers.  Currently, you can only place clusters in **European regions** of cloud providers.  When creating worker nodes, you need to select the appropriate hardware configurations. The configuration depends on the provider and the data center. Use the &#x60;/v1/kubernetes-configs&#x60; endpoint to find available configurations for worker nodes.  Cluster currently supports up to 5 autoscaling groups and a total of 16 worker nodes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Kubernetes&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>>> CreateKubernetesClusterWithHttpInfoAsync(KubernetesCreate? kubernetesCreate = default(KubernetesCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kubernetesCreate;

            localVarRequestOptions.Operation = "KubernetesClustersApi.CreateKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Kubernetes>>("/v1/kubernetes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Kubernetes cluster This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Kubernetes</returns>
        public Kubernetes DeleteKubernetesCluster(int kubernetesId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Kubernetes> localVarResponse = DeleteKubernetesClusterWithHttpInfo(kubernetesId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Kubernetes cluster This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Kubernetes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Kubernetes> DeleteKubernetesClusterWithHttpInfo(int kubernetesId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kubernetesId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kubernetesId)); // path parameter

            localVarRequestOptions.Operation = "KubernetesClustersApi.DeleteKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Kubernetes>("/v1/kubernetes/{kubernetesId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Kubernetes cluster This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Kubernetes</returns>
        public async System.Threading.Tasks.Task<Kubernetes> DeleteKubernetesClusterAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Kubernetes> localVarResponse = await DeleteKubernetesClusterWithHttpInfoAsync(kubernetesId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Kubernetes cluster This method deletes an existing managed Kubernetes cluster. Deleting a cluster will result in the termination of all the worker nodes and the master node that was part of the cluster. All the data stored on the nodes, including the container images, logs, and application data, will also be lost. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Kubernetes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Kubernetes>> DeleteKubernetesClusterWithHttpInfoAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kubernetesId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kubernetesId)); // path parameter

            localVarRequestOptions.Operation = "KubernetesClustersApi.DeleteKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Kubernetes>("/v1/kubernetes/{kubernetesId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Kubernetes cluster The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Kubernetes</returns>
        public Kubernetes EditKubernetesCluster(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Kubernetes> localVarResponse = EditKubernetesClusterWithHttpInfo(kubernetesId, kubernetesUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Kubernetes cluster The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Kubernetes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Kubernetes> EditKubernetesClusterWithHttpInfo(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kubernetesId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kubernetesId)); // path parameter
            localVarRequestOptions.Data = kubernetesUpdate;

            localVarRequestOptions.Operation = "KubernetesClustersApi.EditKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Kubernetes>("/v1/kubernetes/{kubernetesId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Kubernetes cluster The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Kubernetes</returns>
        public async System.Threading.Tasks.Task<Kubernetes> EditKubernetesClusterAsync(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Kubernetes> localVarResponse = await EditKubernetesClusterWithHttpInfoAsync(kubernetesId, kubernetesUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Kubernetes cluster The method for editing a Managed Kubernetes cluster enables you to delete and add new worker nodes and autoscaling groups, as well as change the settings of existing autoscaling groups. You can only edit a cluster when it is in \&quot;ACTIVE\&quot; status. To select hardware configurations for worker nodes, use the /v1/kubernetes-configs endpoint.  When editing a Kubernetes cluster, you can only add or delete worker nodes, but you cannot change the name or configuration of existing worker nodes. If you want to keep a node when editing a cluster, simply specify its ID in the &#39;workerNodes&#39; object. All other fields in &#39;workerNodes&#39; are ignored for existing nodes and are not required. If you want to delete a node, remove its ID.  When you create a new node, all fields in the &#39;workerNodes&#39; object (except ID) are required. Do not add the ID field for a new node.  Please note that the spotMarkup field is ignored for the GCP provider.  When you delete an autoscaling group with existing worker nodes, the worker nodes are also deleted.  During the changes, the cluster status will change to \&quot;ENV_DEVELOPMENT.\&quot; Nodes undergoing changes will be displayed with a \&quot;BUSY\&quot; status. When the changes are successfully applied, the cluster will transition back to the \&quot;ACTIVE\&quot; status, and the nodes will be in the \&quot;ON\&quot; status. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="kubernetesUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Kubernetes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Kubernetes>> EditKubernetesClusterWithHttpInfoAsync(int kubernetesId, KubernetesUpdate? kubernetesUpdate = default(KubernetesUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kubernetesId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kubernetesId)); // path parameter
            localVarRequestOptions.Data = kubernetesUpdate;

            localVarRequestOptions.Operation = "KubernetesClustersApi.EditKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Kubernetes>("/v1/kubernetes/{kubernetesId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Kubernetes cluster by id Returns a Managed Kubernetes cluster by cluster ID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Kubernetes</returns>
        public Kubernetes GetKubernetesCluster(int kubernetesId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Kubernetes> localVarResponse = GetKubernetesClusterWithHttpInfo(kubernetesId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Kubernetes cluster by id Returns a Managed Kubernetes cluster by cluster ID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Kubernetes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Kubernetes> GetKubernetesClusterWithHttpInfo(int kubernetesId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kubernetesId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kubernetesId)); // path parameter

            localVarRequestOptions.Operation = "KubernetesClustersApi.GetKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Kubernetes>("/v1/kubernetes/{kubernetesId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Kubernetes cluster by id Returns a Managed Kubernetes cluster by cluster ID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Kubernetes</returns>
        public async System.Threading.Tasks.Task<Kubernetes> GetKubernetesClusterAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Kubernetes> localVarResponse = await GetKubernetesClusterWithHttpInfoAsync(kubernetesId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Kubernetes cluster by id Returns a Managed Kubernetes cluster by cluster ID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesId">ID of the Kubernetes cluster</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Kubernetes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Kubernetes>> GetKubernetesClusterWithHttpInfoAsync(int kubernetesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kubernetesId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kubernetesId)); // path parameter

            localVarRequestOptions.Operation = "KubernetesClustersApi.GetKubernetesCluster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Kubernetes>("/v1/kubernetes/{kubernetesId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesCluster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of Kubernetes clusters Returns a list of created Kubernetes clusters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Kubernetes&gt;</returns>
        public List<Kubernetes> GetKubernetesClusters(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>> localVarResponse = GetKubernetesClustersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of Kubernetes clusters Returns a list of created Kubernetes clusters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Kubernetes&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>> GetKubernetesClustersWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "KubernetesClustersApi.GetKubernetesClusters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Kubernetes>>("/v1/kubernetes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesClusters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of Kubernetes clusters Returns a list of created Kubernetes clusters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Kubernetes&gt;</returns>
        public async System.Threading.Tasks.Task<List<Kubernetes>> GetKubernetesClustersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>> localVarResponse = await GetKubernetesClustersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of Kubernetes clusters Returns a list of created Kubernetes clusters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Kubernetes&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Kubernetes>>> GetKubernetesClustersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "KubernetesClustersApi.GetKubernetesClusters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Kubernetes>>("/v1/kubernetes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesClusters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
