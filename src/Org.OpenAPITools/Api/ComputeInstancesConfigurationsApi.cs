/*
 * Public EMMA API
 *
 * ### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComputeInstancesConfigurationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List of available configurations for Kubernetes cluster node
        /// </summary>
        /// <remarks>
        /// When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVmConfigs200Response</returns>
        GetVmConfigs200Response GetKuberNodesConfigs(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// List of available configurations for Kubernetes cluster node
        /// </summary>
        /// <remarks>
        /// When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVmConfigs200Response</returns>
        ApiResponse<GetVmConfigs200Response> GetKuberNodesConfigsWithHttpInfo(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        /// <summary>
        /// List of available configurations for spot instance creation
        /// </summary>
        /// <remarks>
        /// When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVmConfigs200Response</returns>
        GetVmConfigs200Response GetSpotConfigs(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// List of available configurations for spot instance creation
        /// </summary>
        /// <remarks>
        /// When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVmConfigs200Response</returns>
        ApiResponse<GetVmConfigs200Response> GetSpotConfigsWithHttpInfo(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        /// <summary>
        /// List of available configurations for virtual machine creation
        /// </summary>
        /// <remarks>
        /// When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVmConfigs200Response</returns>
        GetVmConfigs200Response GetVmConfigs(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// List of available configurations for virtual machine creation
        /// </summary>
        /// <remarks>
        /// When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVmConfigs200Response</returns>
        ApiResponse<GetVmConfigs200Response> GetVmConfigsWithHttpInfo(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComputeInstancesConfigurationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List of available configurations for Kubernetes cluster node
        /// </summary>
        /// <remarks>
        /// When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVmConfigs200Response</returns>
        System.Threading.Tasks.Task<GetVmConfigs200Response> GetKuberNodesConfigsAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List of available configurations for Kubernetes cluster node
        /// </summary>
        /// <remarks>
        /// When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVmConfigs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVmConfigs200Response>> GetKuberNodesConfigsWithHttpInfoAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List of available configurations for spot instance creation
        /// </summary>
        /// <remarks>
        /// When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVmConfigs200Response</returns>
        System.Threading.Tasks.Task<GetVmConfigs200Response> GetSpotConfigsAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List of available configurations for spot instance creation
        /// </summary>
        /// <remarks>
        /// When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVmConfigs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVmConfigs200Response>> GetSpotConfigsWithHttpInfoAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List of available configurations for virtual machine creation
        /// </summary>
        /// <remarks>
        /// When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVmConfigs200Response</returns>
        System.Threading.Tasks.Task<GetVmConfigs200Response> GetVmConfigsAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List of available configurations for virtual machine creation
        /// </summary>
        /// <remarks>
        /// When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVmConfigs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVmConfigs200Response>> GetVmConfigsWithHttpInfoAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComputeInstancesConfigurationsApi : IComputeInstancesConfigurationsApiSync, IComputeInstancesConfigurationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComputeInstancesConfigurationsApi : IComputeInstancesConfigurationsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeInstancesConfigurationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComputeInstancesConfigurationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeInstancesConfigurationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComputeInstancesConfigurationsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeInstancesConfigurationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComputeInstancesConfigurationsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeInstancesConfigurationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComputeInstancesConfigurationsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List of available configurations for Kubernetes cluster node When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVmConfigs200Response</returns>
        public GetVmConfigs200Response GetKuberNodesConfigs(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> localVarResponse = GetKuberNodesConfigsWithHttpInfo(providerId, locationId, dataCenterId, vCpuType, vCpu, vCpuMin, vCpuMax, ramGb, ramGbMin, ramGbMax, volumeGb, volumeGbMin, volumeGbMax, volumeType, priceMin, priceMax, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of available configurations for Kubernetes cluster node When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVmConfigs200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> GetKuberNodesConfigsWithHttpInfo(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (dataCenterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dataCenterId", dataCenterId));
            }
            if (vCpuType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuType", vCpuType));
            }
            if (vCpu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpu", vCpu));
            }
            if (vCpuMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMin", vCpuMin));
            }
            if (vCpuMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMax", vCpuMax));
            }
            if (ramGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGb", ramGb));
            }
            if (ramGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMin", ramGbMin));
            }
            if (ramGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMax", ramGbMax));
            }
            if (volumeGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGb", volumeGb));
            }
            if (volumeGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMin", volumeGbMin));
            }
            if (volumeGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMax", volumeGbMax));
            }
            if (volumeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeType", volumeType));
            }
            if (priceMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMin", priceMin));
            }
            if (priceMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMax", priceMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "ComputeInstancesConfigurationsApi.GetKuberNodesConfigs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetVmConfigs200Response>("/v1/kubernetes-configs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKuberNodesConfigs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of available configurations for Kubernetes cluster node When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVmConfigs200Response</returns>
        public async System.Threading.Tasks.Task<GetVmConfigs200Response> GetKuberNodesConfigsAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> localVarResponse = await GetKuberNodesConfigsWithHttpInfoAsync(providerId, locationId, dataCenterId, vCpuType, vCpu, vCpuMin, vCpuMax, ramGb, ramGbMin, ramGbMax, volumeGb, volumeGbMin, volumeGbMax, volumeType, priceMin, priceMax, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of available configurations for Kubernetes cluster node When creating Kubernetes clusters you need to provide the desired hardware configurations for working nodes. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for working nodes. You can search the available configurations by different parameters (provider, location, data center, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a Kubernetes cluster. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVmConfigs200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response>> GetKuberNodesConfigsWithHttpInfoAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (dataCenterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dataCenterId", dataCenterId));
            }
            if (vCpuType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuType", vCpuType));
            }
            if (vCpu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpu", vCpu));
            }
            if (vCpuMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMin", vCpuMin));
            }
            if (vCpuMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMax", vCpuMax));
            }
            if (ramGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGb", ramGb));
            }
            if (ramGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMin", ramGbMin));
            }
            if (ramGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMax", ramGbMax));
            }
            if (volumeGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGb", volumeGb));
            }
            if (volumeGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMin", volumeGbMin));
            }
            if (volumeGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMax", volumeGbMax));
            }
            if (volumeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeType", volumeType));
            }
            if (priceMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMin", priceMin));
            }
            if (priceMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMax", priceMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "ComputeInstancesConfigurationsApi.GetKuberNodesConfigs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetVmConfigs200Response>("/v1/kubernetes-configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKuberNodesConfigs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of available configurations for spot instance creation When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVmConfigs200Response</returns>
        public GetVmConfigs200Response GetSpotConfigs(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> localVarResponse = GetSpotConfigsWithHttpInfo(providerId, locationId, dataCenterId, cloudNetworkType, vCpuType, vCpu, vCpuMin, vCpuMax, ramGb, ramGbMin, ramGbMax, volumeGb, volumeGbMin, volumeGbMax, volumeType, priceMin, priceMax, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of available configurations for spot instance creation When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVmConfigs200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> GetSpotConfigsWithHttpInfo(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (dataCenterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dataCenterId", dataCenterId));
            }
            if (cloudNetworkType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cloudNetworkType", cloudNetworkType));
            }
            if (vCpuType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuType", vCpuType));
            }
            if (vCpu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpu", vCpu));
            }
            if (vCpuMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMin", vCpuMin));
            }
            if (vCpuMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMax", vCpuMax));
            }
            if (ramGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGb", ramGb));
            }
            if (ramGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMin", ramGbMin));
            }
            if (ramGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMax", ramGbMax));
            }
            if (volumeGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGb", volumeGb));
            }
            if (volumeGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMin", volumeGbMin));
            }
            if (volumeGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMax", volumeGbMax));
            }
            if (volumeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeType", volumeType));
            }
            if (priceMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMin", priceMin));
            }
            if (priceMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMax", priceMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "ComputeInstancesConfigurationsApi.GetSpotConfigs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetVmConfigs200Response>("/v1/spots-configs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotConfigs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of available configurations for spot instance creation When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVmConfigs200Response</returns>
        public async System.Threading.Tasks.Task<GetVmConfigs200Response> GetSpotConfigsAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> localVarResponse = await GetSpotConfigsWithHttpInfoAsync(providerId, locationId, dataCenterId, cloudNetworkType, vCpuType, vCpu, vCpuMin, vCpuMax, ramGb, ramGbMin, ramGbMax, volumeGb, volumeGbMin, volumeGbMax, volumeType, priceMin, priceMax, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of available configurations for spot instance creation When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVmConfigs200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response>> GetSpotConfigsWithHttpInfoAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (dataCenterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dataCenterId", dataCenterId));
            }
            if (cloudNetworkType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cloudNetworkType", cloudNetworkType));
            }
            if (vCpuType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuType", vCpuType));
            }
            if (vCpu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpu", vCpu));
            }
            if (vCpuMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMin", vCpuMin));
            }
            if (vCpuMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMax", vCpuMax));
            }
            if (ramGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGb", ramGb));
            }
            if (ramGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMin", ramGbMin));
            }
            if (ramGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMax", ramGbMax));
            }
            if (volumeGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGb", volumeGb));
            }
            if (volumeGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMin", volumeGbMin));
            }
            if (volumeGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMax", volumeGbMax));
            }
            if (volumeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeType", volumeType));
            }
            if (priceMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMin", priceMin));
            }
            if (priceMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMax", priceMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "ComputeInstancesConfigurationsApi.GetSpotConfigs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetVmConfigs200Response>("/v1/spots-configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotConfigs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of available configurations for virtual machine creation When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVmConfigs200Response</returns>
        public GetVmConfigs200Response GetVmConfigs(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> localVarResponse = GetVmConfigsWithHttpInfo(providerId, locationId, dataCenterId, cloudNetworkType, vCpuType, vCpu, vCpuMin, vCpuMax, ramGb, ramGbMin, ramGbMax, volumeGb, volumeGbMin, volumeGbMax, volumeType, priceMin, priceMax, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of available configurations for virtual machine creation When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVmConfigs200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> GetVmConfigsWithHttpInfo(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (dataCenterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dataCenterId", dataCenterId));
            }
            if (cloudNetworkType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cloudNetworkType", cloudNetworkType));
            }
            if (vCpuType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuType", vCpuType));
            }
            if (vCpu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpu", vCpu));
            }
            if (vCpuMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMin", vCpuMin));
            }
            if (vCpuMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMax", vCpuMax));
            }
            if (ramGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGb", ramGb));
            }
            if (ramGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMin", ramGbMin));
            }
            if (ramGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMax", ramGbMax));
            }
            if (volumeGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGb", volumeGb));
            }
            if (volumeGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMin", volumeGbMin));
            }
            if (volumeGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMax", volumeGbMax));
            }
            if (volumeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeType", volumeType));
            }
            if (priceMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMin", priceMin));
            }
            if (priceMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMax", priceMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "ComputeInstancesConfigurationsApi.GetVmConfigs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetVmConfigs200Response>("/v1/vms-configs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVmConfigs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of available configurations for virtual machine creation When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVmConfigs200Response</returns>
        public async System.Threading.Tasks.Task<GetVmConfigs200Response> GetVmConfigsAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response> localVarResponse = await GetVmConfigsWithHttpInfoAsync(providerId, locationId, dataCenterId, cloudNetworkType, vCpuType, vCpu, vCpuMin, vCpuMax, ramGb, ramGbMin, ramGbMax, volumeGb, volumeGbMin, volumeGbMax, volumeType, priceMin, priceMax, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of available configurations for virtual machine creation When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.  Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).  When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">ID of the cloud provider (optional)</param>
        /// <param name="locationId">ID of the geographic location (optional)</param>
        /// <param name="dataCenterId">ID of the cloud provider&#39;s data center (optional)</param>
        /// <param name="cloudNetworkType">Type of cloud network (optional)</param>
        /// <param name="vCpuType">Type of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpu">virtual Central Processing Units (vCPUs) for the compute instance (optional)</param>
        /// <param name="vCpuMin">Minimum number of vCPUs for the compute instance (optional)</param>
        /// <param name="vCpuMax">Maximum number of vCPUs for the compute instance (optional)</param>
        /// <param name="ramGb">RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMin">Minimum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="ramGbMax">Maximum RAM of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGb">Volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMin">Minimum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeGbMax">Maximum volume size of the compute instance in gigabytes (optional)</param>
        /// <param name="volumeType">Volume type of the compute instance (optional)</param>
        /// <param name="priceMin">Minimum price of the compute instance (optional)</param>
        /// <param name="priceMax">Maximum price of the compute instance (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="size">Query size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVmConfigs200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetVmConfigs200Response>> GetVmConfigsWithHttpInfoAsync(int? providerId = default(int?), int? locationId = default(int?), string? dataCenterId = default(string?), string? cloudNetworkType = default(string?), string? vCpuType = default(string?), int? vCpu = default(int?), int? vCpuMin = default(int?), int? vCpuMax = default(int?), int? ramGb = default(int?), int? ramGbMin = default(int?), int? ramGbMax = default(int?), int? volumeGb = default(int?), int? volumeGbMin = default(int?), int? volumeGbMax = default(int?), string? volumeType = default(string?), decimal? priceMin = default(decimal?), decimal? priceMax = default(decimal?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "providerId", providerId));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (dataCenterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dataCenterId", dataCenterId));
            }
            if (cloudNetworkType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cloudNetworkType", cloudNetworkType));
            }
            if (vCpuType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuType", vCpuType));
            }
            if (vCpu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpu", vCpu));
            }
            if (vCpuMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMin", vCpuMin));
            }
            if (vCpuMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "vCpuMax", vCpuMax));
            }
            if (ramGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGb", ramGb));
            }
            if (ramGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMin", ramGbMin));
            }
            if (ramGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ramGbMax", ramGbMax));
            }
            if (volumeGb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGb", volumeGb));
            }
            if (volumeGbMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMin", volumeGbMin));
            }
            if (volumeGbMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeGbMax", volumeGbMax));
            }
            if (volumeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volumeType", volumeType));
            }
            if (priceMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMin", priceMin));
            }
            if (priceMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "priceMax", priceMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "ComputeInstancesConfigurationsApi.GetVmConfigs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetVmConfigs200Response>("/v1/vms-configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVmConfigs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
