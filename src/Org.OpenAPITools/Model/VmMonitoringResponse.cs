/*
 * Public EMMA API
 *
 * ### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VmMonitoringResponse
    /// </summary>
    [DataContract(Name = "VmMonitoringResponse")]
    public partial class VmMonitoringResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VmMonitoringResponse" /> class.
        /// </summary>
        /// <param name="timecode">timecode.</param>
        /// <param name="cpuDataPresent">Internal service parameter.</param>
        /// <param name="cpuUtilizationAverageCores">CPU utilization with values in range [0, 100*vCPUs].</param>
        /// <param name="avgCpuUtilizationAverageCores">Average CPU utilization for the requested period of statistics.</param>
        /// <param name="maxCpuUtilizationAverageCores">Maximum CPU utilization for the requested period of statistics.</param>
        /// <param name="cpuTotalPercent">Total CPU, %.</param>
        /// <param name="cpuHumanLabel">Label.</param>
        /// <param name="ramDataPresent">Internal service parameter.</param>
        /// <param name="ramUsageAverageGb">Memory utilization.</param>
        /// <param name="avgRamUsageAverageGb">Average memory utilization for the requested period of statistics.</param>
        /// <param name="maxRamUsageAverageGb">Maximum memory utilization for the requested period of statistics.</param>
        /// <param name="ramTotalAmountGb">Total memory, GB.</param>
        /// <param name="ramHumanLabel">Label.</param>
        /// <param name="diskUsedDataPresent">Internal service parameter.</param>
        /// <param name="diskSpaceUsedGb">Disk utilization.</param>
        /// <param name="avgDiskSpaceUsedGb">Average disk utilization for the requested period of statistics.</param>
        /// <param name="maxDiskSpaceUsedGb">Maximum disk utilization for the requested period of statistics.</param>
        /// <param name="diskSpaceTotalGb">Total disk size, GB.</param>
        /// <param name="diskSpaceHumanLabel">Label.</param>
        /// <param name="diskWriteDataPresent">Internal service parameter.</param>
        /// <param name="diskWriteCoef">Internal service parameter.</param>
        /// <param name="diskWriteHuman">Disk write.</param>
        /// <param name="avgDiskWriteHuman">Average disk write for the requested period of statistics.</param>
        /// <param name="maxDiskWriteHuman">Maximum disk write for the requested period of statistics.</param>
        /// <param name="diskWriteHumanLabel">Label.</param>
        /// <param name="diskReadDataPresent">Internal service parameter.</param>
        /// <param name="diskReadCoef">Internal service parameter.</param>
        /// <param name="diskReadHuman">Disk read.</param>
        /// <param name="avgDiskReadHuman">Average disk read for the requested period of statistics.</param>
        /// <param name="maxDiskReadHuman">Maximum disk read for the requested period of statistics.</param>
        /// <param name="diskReadHumanLabel">Label.</param>
        /// <param name="networkOutDataPresent">Internal service parameter.</param>
        /// <param name="networkOutCoef">Internal service parameter.</param>
        /// <param name="networkOutHuman">Network out.</param>
        /// <param name="avgNetworkOutHuman">Average network out for the requested period of statistics.</param>
        /// <param name="maxNetworkOutHuman">Maximum network out for the requested period of statistics.</param>
        /// <param name="networkOutHumanLabel">Label.</param>
        /// <param name="networkInDataPresent">Internal service parameter.</param>
        /// <param name="networkInCoef">Internal service parameter.</param>
        /// <param name="networkInHuman">Network in.</param>
        /// <param name="avgNetworkInHuman">Average network in for the requested period of statistics.</param>
        /// <param name="maxNetworkInHuman">Maximum network in for the requested period of statistics.</param>
        /// <param name="networkInHumanLabel">Label.</param>
        public VmMonitoringResponse(string timecode = default(string), int cpuDataPresent = default(int), decimal cpuUtilizationAverageCores = default(decimal), decimal avgCpuUtilizationAverageCores = default(decimal), decimal maxCpuUtilizationAverageCores = default(decimal), int cpuTotalPercent = default(int), string cpuHumanLabel = default(string), int ramDataPresent = default(int), decimal ramUsageAverageGb = default(decimal), decimal avgRamUsageAverageGb = default(decimal), decimal maxRamUsageAverageGb = default(decimal), decimal ramTotalAmountGb = default(decimal), string ramHumanLabel = default(string), int diskUsedDataPresent = default(int), decimal diskSpaceUsedGb = default(decimal), decimal avgDiskSpaceUsedGb = default(decimal), decimal maxDiskSpaceUsedGb = default(decimal), int diskSpaceTotalGb = default(int), string diskSpaceHumanLabel = default(string), int diskWriteDataPresent = default(int), decimal diskWriteCoef = default(decimal), decimal diskWriteHuman = default(decimal), decimal avgDiskWriteHuman = default(decimal), decimal maxDiskWriteHuman = default(decimal), string diskWriteHumanLabel = default(string), int diskReadDataPresent = default(int), decimal diskReadCoef = default(decimal), decimal diskReadHuman = default(decimal), decimal avgDiskReadHuman = default(decimal), decimal maxDiskReadHuman = default(decimal), string diskReadHumanLabel = default(string), int networkOutDataPresent = default(int), decimal networkOutCoef = default(decimal), decimal networkOutHuman = default(decimal), decimal avgNetworkOutHuman = default(decimal), decimal maxNetworkOutHuman = default(decimal), string networkOutHumanLabel = default(string), int networkInDataPresent = default(int), decimal networkInCoef = default(decimal), decimal networkInHuman = default(decimal), decimal avgNetworkInHuman = default(decimal), decimal maxNetworkInHuman = default(decimal), string networkInHumanLabel = default(string))
        {
            this.Timecode = timecode;
            this.CpuDataPresent = cpuDataPresent;
            this.CpuUtilizationAverageCores = cpuUtilizationAverageCores;
            this.AvgCpuUtilizationAverageCores = avgCpuUtilizationAverageCores;
            this.MaxCpuUtilizationAverageCores = maxCpuUtilizationAverageCores;
            this.CpuTotalPercent = cpuTotalPercent;
            this.CpuHumanLabel = cpuHumanLabel;
            this.RamDataPresent = ramDataPresent;
            this.RamUsageAverageGb = ramUsageAverageGb;
            this.AvgRamUsageAverageGb = avgRamUsageAverageGb;
            this.MaxRamUsageAverageGb = maxRamUsageAverageGb;
            this.RamTotalAmountGb = ramTotalAmountGb;
            this.RamHumanLabel = ramHumanLabel;
            this.DiskUsedDataPresent = diskUsedDataPresent;
            this.DiskSpaceUsedGb = diskSpaceUsedGb;
            this.AvgDiskSpaceUsedGb = avgDiskSpaceUsedGb;
            this.MaxDiskSpaceUsedGb = maxDiskSpaceUsedGb;
            this.DiskSpaceTotalGb = diskSpaceTotalGb;
            this.DiskSpaceHumanLabel = diskSpaceHumanLabel;
            this.DiskWriteDataPresent = diskWriteDataPresent;
            this.DiskWriteCoef = diskWriteCoef;
            this.DiskWriteHuman = diskWriteHuman;
            this.AvgDiskWriteHuman = avgDiskWriteHuman;
            this.MaxDiskWriteHuman = maxDiskWriteHuman;
            this.DiskWriteHumanLabel = diskWriteHumanLabel;
            this.DiskReadDataPresent = diskReadDataPresent;
            this.DiskReadCoef = diskReadCoef;
            this.DiskReadHuman = diskReadHuman;
            this.AvgDiskReadHuman = avgDiskReadHuman;
            this.MaxDiskReadHuman = maxDiskReadHuman;
            this.DiskReadHumanLabel = diskReadHumanLabel;
            this.NetworkOutDataPresent = networkOutDataPresent;
            this.NetworkOutCoef = networkOutCoef;
            this.NetworkOutHuman = networkOutHuman;
            this.AvgNetworkOutHuman = avgNetworkOutHuman;
            this.MaxNetworkOutHuman = maxNetworkOutHuman;
            this.NetworkOutHumanLabel = networkOutHumanLabel;
            this.NetworkInDataPresent = networkInDataPresent;
            this.NetworkInCoef = networkInCoef;
            this.NetworkInHuman = networkInHuman;
            this.AvgNetworkInHuman = avgNetworkInHuman;
            this.MaxNetworkInHuman = maxNetworkInHuman;
            this.NetworkInHumanLabel = networkInHumanLabel;
        }

        /// <summary>
        /// Gets or Sets Timecode
        /// </summary>
        /// <example>2024-06-19T09:52:00.000+00:00</example>
        [DataMember(Name = "timecode", EmitDefaultValue = false)]
        public string Timecode { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "cpuDataPresent", EmitDefaultValue = false)]
        public int CpuDataPresent { get; set; }

        /// <summary>
        /// CPU utilization with values in range [0, 100*vCPUs]
        /// </summary>
        /// <value>CPU utilization with values in range [0, 100*vCPUs]</value>
        /// <example>54.5</example>
        [DataMember(Name = "cpuUtilizationAverageCores", EmitDefaultValue = false)]
        public decimal CpuUtilizationAverageCores { get; set; }

        /// <summary>
        /// Average CPU utilization for the requested period of statistics
        /// </summary>
        /// <value>Average CPU utilization for the requested period of statistics</value>
        /// <example>54.5</example>
        [DataMember(Name = "avgCpuUtilizationAverageCores", EmitDefaultValue = false)]
        public decimal AvgCpuUtilizationAverageCores { get; set; }

        /// <summary>
        /// Maximum CPU utilization for the requested period of statistics
        /// </summary>
        /// <value>Maximum CPU utilization for the requested period of statistics</value>
        /// <example>54.5</example>
        [DataMember(Name = "maxCpuUtilizationAverageCores", EmitDefaultValue = false)]
        public decimal MaxCpuUtilizationAverageCores { get; set; }

        /// <summary>
        /// Total CPU, %
        /// </summary>
        /// <value>Total CPU, %</value>
        /// <example>200</example>
        [DataMember(Name = "cpuTotalPercent", EmitDefaultValue = false)]
        public int CpuTotalPercent { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>%</example>
        [DataMember(Name = "cpuHumanLabel", EmitDefaultValue = false)]
        public string CpuHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "ramDataPresent", EmitDefaultValue = false)]
        public int RamDataPresent { get; set; }

        /// <summary>
        /// Memory utilization
        /// </summary>
        /// <value>Memory utilization</value>
        /// <example>1.5</example>
        [DataMember(Name = "ramUsageAverageGb", EmitDefaultValue = false)]
        public decimal RamUsageAverageGb { get; set; }

        /// <summary>
        /// Average memory utilization for the requested period of statistics
        /// </summary>
        /// <value>Average memory utilization for the requested period of statistics</value>
        /// <example>1.5</example>
        [DataMember(Name = "avgRamUsageAverageGb", EmitDefaultValue = false)]
        public decimal AvgRamUsageAverageGb { get; set; }

        /// <summary>
        /// Maximum memory utilization for the requested period of statistics
        /// </summary>
        /// <value>Maximum memory utilization for the requested period of statistics</value>
        /// <example>1.5</example>
        [DataMember(Name = "maxRamUsageAverageGb", EmitDefaultValue = false)]
        public decimal MaxRamUsageAverageGb { get; set; }

        /// <summary>
        /// Total memory, GB
        /// </summary>
        /// <value>Total memory, GB</value>
        /// <example>2.0</example>
        [DataMember(Name = "ramTotalAmountGb", EmitDefaultValue = false)]
        public decimal RamTotalAmountGb { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>GB</example>
        [DataMember(Name = "ramHumanLabel", EmitDefaultValue = false)]
        public string RamHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "diskUsedDataPresent", EmitDefaultValue = false)]
        public int DiskUsedDataPresent { get; set; }

        /// <summary>
        /// Disk utilization
        /// </summary>
        /// <value>Disk utilization</value>
        /// <example>10.5</example>
        [DataMember(Name = "diskSpaceUsedGb", EmitDefaultValue = false)]
        public decimal DiskSpaceUsedGb { get; set; }

        /// <summary>
        /// Average disk utilization for the requested period of statistics
        /// </summary>
        /// <value>Average disk utilization for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "avgDiskSpaceUsedGb", EmitDefaultValue = false)]
        public decimal AvgDiskSpaceUsedGb { get; set; }

        /// <summary>
        /// Maximum disk utilization for the requested period of statistics
        /// </summary>
        /// <value>Maximum disk utilization for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "maxDiskSpaceUsedGb", EmitDefaultValue = false)]
        public decimal MaxDiskSpaceUsedGb { get; set; }

        /// <summary>
        /// Total disk size, GB
        /// </summary>
        /// <value>Total disk size, GB</value>
        /// <example>16</example>
        [DataMember(Name = "diskSpaceTotalGb", EmitDefaultValue = false)]
        public int DiskSpaceTotalGb { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>GB</example>
        [DataMember(Name = "diskSpaceHumanLabel", EmitDefaultValue = false)]
        public string DiskSpaceHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "diskWriteDataPresent", EmitDefaultValue = false)]
        public int DiskWriteDataPresent { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1000</example>
        [DataMember(Name = "diskWriteCoef", EmitDefaultValue = false)]
        public decimal DiskWriteCoef { get; set; }

        /// <summary>
        /// Disk write
        /// </summary>
        /// <value>Disk write</value>
        /// <example>10.5</example>
        [DataMember(Name = "diskWriteHuman", EmitDefaultValue = false)]
        public decimal DiskWriteHuman { get; set; }

        /// <summary>
        /// Average disk write for the requested period of statistics
        /// </summary>
        /// <value>Average disk write for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "avgDiskWriteHuman", EmitDefaultValue = false)]
        public decimal AvgDiskWriteHuman { get; set; }

        /// <summary>
        /// Maximum disk write for the requested period of statistics
        /// </summary>
        /// <value>Maximum disk write for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "maxDiskWriteHuman", EmitDefaultValue = false)]
        public decimal MaxDiskWriteHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "diskWriteHumanLabel", EmitDefaultValue = false)]
        public string DiskWriteHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "diskReadDataPresent", EmitDefaultValue = false)]
        public int DiskReadDataPresent { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1000</example>
        [DataMember(Name = "diskReadCoef", EmitDefaultValue = false)]
        public decimal DiskReadCoef { get; set; }

        /// <summary>
        /// Disk read
        /// </summary>
        /// <value>Disk read</value>
        /// <example>10.5</example>
        [DataMember(Name = "diskReadHuman", EmitDefaultValue = false)]
        public decimal DiskReadHuman { get; set; }

        /// <summary>
        /// Average disk read for the requested period of statistics
        /// </summary>
        /// <value>Average disk read for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "avgDiskReadHuman", EmitDefaultValue = false)]
        public decimal AvgDiskReadHuman { get; set; }

        /// <summary>
        /// Maximum disk read for the requested period of statistics
        /// </summary>
        /// <value>Maximum disk read for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "maxDiskReadHuman", EmitDefaultValue = false)]
        public decimal MaxDiskReadHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "diskReadHumanLabel", EmitDefaultValue = false)]
        public string DiskReadHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "networkOutDataPresent", EmitDefaultValue = false)]
        public int NetworkOutDataPresent { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1000</example>
        [DataMember(Name = "networkOutCoef", EmitDefaultValue = false)]
        public decimal NetworkOutCoef { get; set; }

        /// <summary>
        /// Network out
        /// </summary>
        /// <value>Network out</value>
        /// <example>10.5</example>
        [DataMember(Name = "networkOutHuman", EmitDefaultValue = false)]
        public decimal NetworkOutHuman { get; set; }

        /// <summary>
        /// Average network out for the requested period of statistics
        /// </summary>
        /// <value>Average network out for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "avgNetworkOutHuman", EmitDefaultValue = false)]
        public decimal AvgNetworkOutHuman { get; set; }

        /// <summary>
        /// Maximum network out for the requested period of statistics
        /// </summary>
        /// <value>Maximum network out for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "maxNetworkOutHuman", EmitDefaultValue = false)]
        public decimal MaxNetworkOutHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "networkOutHumanLabel", EmitDefaultValue = false)]
        public string NetworkOutHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "networkInDataPresent", EmitDefaultValue = false)]
        public int NetworkInDataPresent { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1000</example>
        [DataMember(Name = "networkInCoef", EmitDefaultValue = false)]
        public decimal NetworkInCoef { get; set; }

        /// <summary>
        /// Network in
        /// </summary>
        /// <value>Network in</value>
        /// <example>10.5</example>
        [DataMember(Name = "networkInHuman", EmitDefaultValue = false)]
        public decimal NetworkInHuman { get; set; }

        /// <summary>
        /// Average network in for the requested period of statistics
        /// </summary>
        /// <value>Average network in for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "avgNetworkInHuman", EmitDefaultValue = false)]
        public decimal AvgNetworkInHuman { get; set; }

        /// <summary>
        /// Maximum network in for the requested period of statistics
        /// </summary>
        /// <value>Maximum network in for the requested period of statistics</value>
        /// <example>10.5</example>
        [DataMember(Name = "maxNetworkInHuman", EmitDefaultValue = false)]
        public decimal MaxNetworkInHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "networkInHumanLabel", EmitDefaultValue = false)]
        public string NetworkInHumanLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VmMonitoringResponse {\n");
            sb.Append("  Timecode: ").Append(Timecode).Append("\n");
            sb.Append("  CpuDataPresent: ").Append(CpuDataPresent).Append("\n");
            sb.Append("  CpuUtilizationAverageCores: ").Append(CpuUtilizationAverageCores).Append("\n");
            sb.Append("  AvgCpuUtilizationAverageCores: ").Append(AvgCpuUtilizationAverageCores).Append("\n");
            sb.Append("  MaxCpuUtilizationAverageCores: ").Append(MaxCpuUtilizationAverageCores).Append("\n");
            sb.Append("  CpuTotalPercent: ").Append(CpuTotalPercent).Append("\n");
            sb.Append("  CpuHumanLabel: ").Append(CpuHumanLabel).Append("\n");
            sb.Append("  RamDataPresent: ").Append(RamDataPresent).Append("\n");
            sb.Append("  RamUsageAverageGb: ").Append(RamUsageAverageGb).Append("\n");
            sb.Append("  AvgRamUsageAverageGb: ").Append(AvgRamUsageAverageGb).Append("\n");
            sb.Append("  MaxRamUsageAverageGb: ").Append(MaxRamUsageAverageGb).Append("\n");
            sb.Append("  RamTotalAmountGb: ").Append(RamTotalAmountGb).Append("\n");
            sb.Append("  RamHumanLabel: ").Append(RamHumanLabel).Append("\n");
            sb.Append("  DiskUsedDataPresent: ").Append(DiskUsedDataPresent).Append("\n");
            sb.Append("  DiskSpaceUsedGb: ").Append(DiskSpaceUsedGb).Append("\n");
            sb.Append("  AvgDiskSpaceUsedGb: ").Append(AvgDiskSpaceUsedGb).Append("\n");
            sb.Append("  MaxDiskSpaceUsedGb: ").Append(MaxDiskSpaceUsedGb).Append("\n");
            sb.Append("  DiskSpaceTotalGb: ").Append(DiskSpaceTotalGb).Append("\n");
            sb.Append("  DiskSpaceHumanLabel: ").Append(DiskSpaceHumanLabel).Append("\n");
            sb.Append("  DiskWriteDataPresent: ").Append(DiskWriteDataPresent).Append("\n");
            sb.Append("  DiskWriteCoef: ").Append(DiskWriteCoef).Append("\n");
            sb.Append("  DiskWriteHuman: ").Append(DiskWriteHuman).Append("\n");
            sb.Append("  AvgDiskWriteHuman: ").Append(AvgDiskWriteHuman).Append("\n");
            sb.Append("  MaxDiskWriteHuman: ").Append(MaxDiskWriteHuman).Append("\n");
            sb.Append("  DiskWriteHumanLabel: ").Append(DiskWriteHumanLabel).Append("\n");
            sb.Append("  DiskReadDataPresent: ").Append(DiskReadDataPresent).Append("\n");
            sb.Append("  DiskReadCoef: ").Append(DiskReadCoef).Append("\n");
            sb.Append("  DiskReadHuman: ").Append(DiskReadHuman).Append("\n");
            sb.Append("  AvgDiskReadHuman: ").Append(AvgDiskReadHuman).Append("\n");
            sb.Append("  MaxDiskReadHuman: ").Append(MaxDiskReadHuman).Append("\n");
            sb.Append("  DiskReadHumanLabel: ").Append(DiskReadHumanLabel).Append("\n");
            sb.Append("  NetworkOutDataPresent: ").Append(NetworkOutDataPresent).Append("\n");
            sb.Append("  NetworkOutCoef: ").Append(NetworkOutCoef).Append("\n");
            sb.Append("  NetworkOutHuman: ").Append(NetworkOutHuman).Append("\n");
            sb.Append("  AvgNetworkOutHuman: ").Append(AvgNetworkOutHuman).Append("\n");
            sb.Append("  MaxNetworkOutHuman: ").Append(MaxNetworkOutHuman).Append("\n");
            sb.Append("  NetworkOutHumanLabel: ").Append(NetworkOutHumanLabel).Append("\n");
            sb.Append("  NetworkInDataPresent: ").Append(NetworkInDataPresent).Append("\n");
            sb.Append("  NetworkInCoef: ").Append(NetworkInCoef).Append("\n");
            sb.Append("  NetworkInHuman: ").Append(NetworkInHuman).Append("\n");
            sb.Append("  AvgNetworkInHuman: ").Append(AvgNetworkInHuman).Append("\n");
            sb.Append("  MaxNetworkInHuman: ").Append(MaxNetworkInHuman).Append("\n");
            sb.Append("  NetworkInHumanLabel: ").Append(NetworkInHumanLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
