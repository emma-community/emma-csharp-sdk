/*
 * Public EMMA API
 *
 * ### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VmAnalyticsResponse
    /// </summary>
    [DataContract(Name = "VmAnalyticsResponse")]
    public partial class VmAnalyticsResponse : IValidatableObject
    {
        /// <summary>
        /// Dataset type
        /// </summary>
        /// <value>Dataset type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Actual for value: actual
            /// </summary>
            [EnumMember(Value = "actual")]
            Actual = 1,

            /// <summary>
            /// Enum Predicted for value: predicted
            /// </summary>
            [EnumMember(Value = "predicted")]
            Predicted = 2
        }


        /// <summary>
        /// Dataset type
        /// </summary>
        /// <value>Dataset type</value>
        /// <example>actual</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VmAnalyticsResponse" /> class.
        /// </summary>
        /// <param name="vmId">ID of VM.</param>
        /// <param name="timecode">timecode.</param>
        /// <param name="avgDateStart">Start of the period for average value calculation.</param>
        /// <param name="avgDateEnd">End of the period for average value calculation.</param>
        /// <param name="quantilesDateStart">Start of the period for percentile value calculation.</param>
        /// <param name="quantilesDateEnd">End of the period for percentile value calculation.</param>
        /// <param name="cpuDataPresent">Internal service parameter.</param>
        /// <param name="cpuUtilizationAverageCores">CPU utilization with values in range [0, 100*vCPUs].</param>
        /// <param name="cpuUtilizationAverageCoresQ10">10th percentile of CPU utilization.</param>
        /// <param name="cpuUtilizationAverageCoresQ90">90th percentile of CPU utilization.</param>
        /// <param name="cpuCoresNumber">Total CPU, vCPUs.</param>
        /// <param name="cpuTotalPercent">Total CPU, %.</param>
        /// <param name="cpuHumanLabel">Label.</param>
        /// <param name="ramDataPresent">Internal service parameter.</param>
        /// <param name="ramUsageAverageMb">Memory utilization.</param>
        /// <param name="ramUsageAverageMbQ10">10th percentile of memory utilization.</param>
        /// <param name="ramUsageAverageMbQ90">90th percentile of memory utilization.</param>
        /// <param name="ramTotalAmountMb">Total memory, MB.</param>
        /// <param name="ramHumanLabel">Label.</param>
        /// <param name="diskUsedDataPresent">Internal service parameter.</param>
        /// <param name="diskSpaceUsedGb">Disk utilization.</param>
        /// <param name="diskSpaceUsedGbQ10">10th percentile of disk utilization.</param>
        /// <param name="diskSpaceUsedGbQ90">90th percentile of disk utilization.</param>
        /// <param name="diskSpaceTotalGb">Total disk size, GB.</param>
        /// <param name="diskSpaceHumanLabel">Label.</param>
        /// <param name="diskWriteDataPresent">Internal service parameter.</param>
        /// <param name="diskWriteBps">Disk write, bps.</param>
        /// <param name="diskWriteHuman">Disk write.</param>
        /// <param name="diskWriteHumanLabel">Label.</param>
        /// <param name="diskReadDataPresent">Internal service parameter.</param>
        /// <param name="diskReadBps">Disk read, bps.</param>
        /// <param name="diskReadHuman">Disk read.</param>
        /// <param name="diskReadHumanLabel">Label.</param>
        /// <param name="networkOutDataPresent">Internal service parameter.</param>
        /// <param name="networkOutBps">Network out, bps.</param>
        /// <param name="networkOutHuman">Network out.</param>
        /// <param name="networkOutHumanLabel">Label.</param>
        /// <param name="networkInDataPresent">Internal service parameter.</param>
        /// <param name="networkInBps">Network in, bps.</param>
        /// <param name="networkInHuman">Network in.</param>
        /// <param name="networkInHumanLabel">Label.</param>
        /// <param name="isShownShort">Internal service parameter.</param>
        /// <param name="type">Dataset type.</param>
        public VmAnalyticsResponse(int vmId = default(int), string timecode = default(string), string avgDateStart = default(string), string avgDateEnd = default(string), string quantilesDateStart = default(string), string quantilesDateEnd = default(string), int cpuDataPresent = default(int), decimal cpuUtilizationAverageCores = default(decimal), decimal cpuUtilizationAverageCoresQ10 = default(decimal), decimal cpuUtilizationAverageCoresQ90 = default(decimal), int cpuCoresNumber = default(int), int cpuTotalPercent = default(int), string cpuHumanLabel = default(string), int ramDataPresent = default(int), decimal ramUsageAverageMb = default(decimal), decimal ramUsageAverageMbQ10 = default(decimal), decimal ramUsageAverageMbQ90 = default(decimal), int ramTotalAmountMb = default(int), string ramHumanLabel = default(string), int diskUsedDataPresent = default(int), decimal diskSpaceUsedGb = default(decimal), decimal diskSpaceUsedGbQ10 = default(decimal), decimal diskSpaceUsedGbQ90 = default(decimal), decimal diskSpaceTotalGb = default(decimal), string diskSpaceHumanLabel = default(string), int diskWriteDataPresent = default(int), decimal diskWriteBps = default(decimal), decimal diskWriteHuman = default(decimal), string diskWriteHumanLabel = default(string), int diskReadDataPresent = default(int), decimal diskReadBps = default(decimal), decimal diskReadHuman = default(decimal), string diskReadHumanLabel = default(string), int networkOutDataPresent = default(int), decimal networkOutBps = default(decimal), decimal networkOutHuman = default(decimal), string networkOutHumanLabel = default(string), int networkInDataPresent = default(int), decimal networkInBps = default(decimal), decimal networkInHuman = default(decimal), string networkInHumanLabel = default(string), int isShownShort = default(int), TypeEnum? type = default(TypeEnum?))
        {
            this.VmId = vmId;
            this.Timecode = timecode;
            this.AvgDateStart = avgDateStart;
            this.AvgDateEnd = avgDateEnd;
            this.QuantilesDateStart = quantilesDateStart;
            this.QuantilesDateEnd = quantilesDateEnd;
            this.CpuDataPresent = cpuDataPresent;
            this.CpuUtilizationAverageCores = cpuUtilizationAverageCores;
            this.CpuUtilizationAverageCoresQ10 = cpuUtilizationAverageCoresQ10;
            this.CpuUtilizationAverageCoresQ90 = cpuUtilizationAverageCoresQ90;
            this.CpuCoresNumber = cpuCoresNumber;
            this.CpuTotalPercent = cpuTotalPercent;
            this.CpuHumanLabel = cpuHumanLabel;
            this.RamDataPresent = ramDataPresent;
            this.RamUsageAverageMb = ramUsageAverageMb;
            this.RamUsageAverageMbQ10 = ramUsageAverageMbQ10;
            this.RamUsageAverageMbQ90 = ramUsageAverageMbQ90;
            this.RamTotalAmountMb = ramTotalAmountMb;
            this.RamHumanLabel = ramHumanLabel;
            this.DiskUsedDataPresent = diskUsedDataPresent;
            this.DiskSpaceUsedGb = diskSpaceUsedGb;
            this.DiskSpaceUsedGbQ10 = diskSpaceUsedGbQ10;
            this.DiskSpaceUsedGbQ90 = diskSpaceUsedGbQ90;
            this.DiskSpaceTotalGb = diskSpaceTotalGb;
            this.DiskSpaceHumanLabel = diskSpaceHumanLabel;
            this.DiskWriteDataPresent = diskWriteDataPresent;
            this.DiskWriteBps = diskWriteBps;
            this.DiskWriteHuman = diskWriteHuman;
            this.DiskWriteHumanLabel = diskWriteHumanLabel;
            this.DiskReadDataPresent = diskReadDataPresent;
            this.DiskReadBps = diskReadBps;
            this.DiskReadHuman = diskReadHuman;
            this.DiskReadHumanLabel = diskReadHumanLabel;
            this.NetworkOutDataPresent = networkOutDataPresent;
            this.NetworkOutBps = networkOutBps;
            this.NetworkOutHuman = networkOutHuman;
            this.NetworkOutHumanLabel = networkOutHumanLabel;
            this.NetworkInDataPresent = networkInDataPresent;
            this.NetworkInBps = networkInBps;
            this.NetworkInHuman = networkInHuman;
            this.NetworkInHumanLabel = networkInHumanLabel;
            this.IsShownShort = isShownShort;
            this.Type = type;
        }

        /// <summary>
        /// ID of VM
        /// </summary>
        /// <value>ID of VM</value>
        /// <example>1111</example>
        [DataMember(Name = "vmId", EmitDefaultValue = false)]
        public int VmId { get; set; }

        /// <summary>
        /// Gets or Sets Timecode
        /// </summary>
        /// <example>2024-06-19T09:50:00.000+00:00</example>
        [DataMember(Name = "timecode", EmitDefaultValue = false)]
        public string Timecode { get; set; }

        /// <summary>
        /// Start of the period for average value calculation
        /// </summary>
        /// <value>Start of the period for average value calculation</value>
        /// <example>2024-06-19T09:50:00.000+00:00</example>
        [DataMember(Name = "avgDateStart", EmitDefaultValue = false)]
        public string AvgDateStart { get; set; }

        /// <summary>
        /// End of the period for average value calculation
        /// </summary>
        /// <value>End of the period for average value calculation</value>
        /// <example>2024-06-19T09:55:00.000+00:00</example>
        [DataMember(Name = "avgDateEnd", EmitDefaultValue = false)]
        public string AvgDateEnd { get; set; }

        /// <summary>
        /// Start of the period for percentile value calculation
        /// </summary>
        /// <value>Start of the period for percentile value calculation</value>
        /// <example>2024-06-19T09:50:00.000+00:00</example>
        [DataMember(Name = "quantilesDateStart", EmitDefaultValue = false)]
        public string QuantilesDateStart { get; set; }

        /// <summary>
        /// End of the period for percentile value calculation
        /// </summary>
        /// <value>End of the period for percentile value calculation</value>
        /// <example>2024-06-19T09:55:00.000+00:00</example>
        [DataMember(Name = "quantilesDateEnd", EmitDefaultValue = false)]
        public string QuantilesDateEnd { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "cpuDataPresent", EmitDefaultValue = false)]
        public int CpuDataPresent { get; set; }

        /// <summary>
        /// CPU utilization with values in range [0, 100*vCPUs]
        /// </summary>
        /// <value>CPU utilization with values in range [0, 100*vCPUs]</value>
        /// <example>112.3</example>
        [DataMember(Name = "cpuUtilizationAverageCores", EmitDefaultValue = false)]
        public decimal CpuUtilizationAverageCores { get; set; }

        /// <summary>
        /// 10th percentile of CPU utilization
        /// </summary>
        /// <value>10th percentile of CPU utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "cpuUtilizationAverageCoresQ10", EmitDefaultValue = false)]
        public decimal CpuUtilizationAverageCoresQ10 { get; set; }

        /// <summary>
        /// 90th percentile of CPU utilization
        /// </summary>
        /// <value>90th percentile of CPU utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "cpuUtilizationAverageCoresQ90", EmitDefaultValue = false)]
        public decimal CpuUtilizationAverageCoresQ90 { get; set; }

        /// <summary>
        /// Total CPU, vCPUs
        /// </summary>
        /// <value>Total CPU, vCPUs</value>
        /// <example>2</example>
        [DataMember(Name = "cpuCoresNumber", EmitDefaultValue = false)]
        public int CpuCoresNumber { get; set; }

        /// <summary>
        /// Total CPU, %
        /// </summary>
        /// <value>Total CPU, %</value>
        /// <example>200</example>
        [DataMember(Name = "cpuTotalPercent", EmitDefaultValue = false)]
        public int CpuTotalPercent { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>%</example>
        [DataMember(Name = "cpuHumanLabel", EmitDefaultValue = false)]
        public string CpuHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "ramDataPresent", EmitDefaultValue = false)]
        public int RamDataPresent { get; set; }

        /// <summary>
        /// Memory utilization
        /// </summary>
        /// <value>Memory utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "ramUsageAverageMb", EmitDefaultValue = false)]
        public decimal RamUsageAverageMb { get; set; }

        /// <summary>
        /// 10th percentile of memory utilization
        /// </summary>
        /// <value>10th percentile of memory utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "ramUsageAverageMbQ10", EmitDefaultValue = false)]
        public decimal RamUsageAverageMbQ10 { get; set; }

        /// <summary>
        /// 90th percentile of memory utilization
        /// </summary>
        /// <value>90th percentile of memory utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "ramUsageAverageMbQ90", EmitDefaultValue = false)]
        public decimal RamUsageAverageMbQ90 { get; set; }

        /// <summary>
        /// Total memory, MB
        /// </summary>
        /// <value>Total memory, MB</value>
        /// <example>2048</example>
        [DataMember(Name = "ramTotalAmountMb", EmitDefaultValue = false)]
        public int RamTotalAmountMb { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>MB</example>
        [DataMember(Name = "ramHumanLabel", EmitDefaultValue = false)]
        public string RamHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "diskUsedDataPresent", EmitDefaultValue = false)]
        public int DiskUsedDataPresent { get; set; }

        /// <summary>
        /// Disk utilization
        /// </summary>
        /// <value>Disk utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskSpaceUsedGb", EmitDefaultValue = false)]
        public decimal DiskSpaceUsedGb { get; set; }

        /// <summary>
        /// 10th percentile of disk utilization
        /// </summary>
        /// <value>10th percentile of disk utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskSpaceUsedGbQ10", EmitDefaultValue = false)]
        public decimal DiskSpaceUsedGbQ10 { get; set; }

        /// <summary>
        /// 90th percentile of disk utilization
        /// </summary>
        /// <value>90th percentile of disk utilization</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskSpaceUsedGbQ90", EmitDefaultValue = false)]
        public decimal DiskSpaceUsedGbQ90 { get; set; }

        /// <summary>
        /// Total disk size, GB
        /// </summary>
        /// <value>Total disk size, GB</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskSpaceTotalGb", EmitDefaultValue = false)]
        public decimal DiskSpaceTotalGb { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>GB</example>
        [DataMember(Name = "diskSpaceHumanLabel", EmitDefaultValue = false)]
        public string DiskSpaceHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "diskWriteDataPresent", EmitDefaultValue = false)]
        public int DiskWriteDataPresent { get; set; }

        /// <summary>
        /// Disk write, bps
        /// </summary>
        /// <value>Disk write, bps</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskWriteBps", EmitDefaultValue = false)]
        public decimal DiskWriteBps { get; set; }

        /// <summary>
        /// Disk write
        /// </summary>
        /// <value>Disk write</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskWriteHuman", EmitDefaultValue = false)]
        public decimal DiskWriteHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "diskWriteHumanLabel", EmitDefaultValue = false)]
        public string DiskWriteHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "diskReadDataPresent", EmitDefaultValue = false)]
        public int DiskReadDataPresent { get; set; }

        /// <summary>
        /// Disk read, bps
        /// </summary>
        /// <value>Disk read, bps</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskReadBps", EmitDefaultValue = false)]
        public decimal DiskReadBps { get; set; }

        /// <summary>
        /// Disk read
        /// </summary>
        /// <value>Disk read</value>
        /// <example>112.3</example>
        [DataMember(Name = "diskReadHuman", EmitDefaultValue = false)]
        public decimal DiskReadHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "diskReadHumanLabel", EmitDefaultValue = false)]
        public string DiskReadHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "networkOutDataPresent", EmitDefaultValue = false)]
        public int NetworkOutDataPresent { get; set; }

        /// <summary>
        /// Network out, bps
        /// </summary>
        /// <value>Network out, bps</value>
        /// <example>112.3</example>
        [DataMember(Name = "networkOutBps", EmitDefaultValue = false)]
        public decimal NetworkOutBps { get; set; }

        /// <summary>
        /// Network out
        /// </summary>
        /// <value>Network out</value>
        /// <example>112.3</example>
        [DataMember(Name = "networkOutHuman", EmitDefaultValue = false)]
        public decimal NetworkOutHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "networkOutHumanLabel", EmitDefaultValue = false)]
        public string NetworkOutHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "networkInDataPresent", EmitDefaultValue = false)]
        public int NetworkInDataPresent { get; set; }

        /// <summary>
        /// Network in, bps
        /// </summary>
        /// <value>Network in, bps</value>
        /// <example>112.3</example>
        [DataMember(Name = "networkInBps", EmitDefaultValue = false)]
        public decimal NetworkInBps { get; set; }

        /// <summary>
        /// Network in
        /// </summary>
        /// <value>Network in</value>
        /// <example>112.3</example>
        [DataMember(Name = "networkInHuman", EmitDefaultValue = false)]
        public decimal NetworkInHuman { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        /// <example>Kbps</example>
        [DataMember(Name = "networkInHumanLabel", EmitDefaultValue = false)]
        public string NetworkInHumanLabel { get; set; }

        /// <summary>
        /// Internal service parameter
        /// </summary>
        /// <value>Internal service parameter</value>
        /// <example>1</example>
        [DataMember(Name = "isShownShort", EmitDefaultValue = false)]
        public int IsShownShort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VmAnalyticsResponse {\n");
            sb.Append("  VmId: ").Append(VmId).Append("\n");
            sb.Append("  Timecode: ").Append(Timecode).Append("\n");
            sb.Append("  AvgDateStart: ").Append(AvgDateStart).Append("\n");
            sb.Append("  AvgDateEnd: ").Append(AvgDateEnd).Append("\n");
            sb.Append("  QuantilesDateStart: ").Append(QuantilesDateStart).Append("\n");
            sb.Append("  QuantilesDateEnd: ").Append(QuantilesDateEnd).Append("\n");
            sb.Append("  CpuDataPresent: ").Append(CpuDataPresent).Append("\n");
            sb.Append("  CpuUtilizationAverageCores: ").Append(CpuUtilizationAverageCores).Append("\n");
            sb.Append("  CpuUtilizationAverageCoresQ10: ").Append(CpuUtilizationAverageCoresQ10).Append("\n");
            sb.Append("  CpuUtilizationAverageCoresQ90: ").Append(CpuUtilizationAverageCoresQ90).Append("\n");
            sb.Append("  CpuCoresNumber: ").Append(CpuCoresNumber).Append("\n");
            sb.Append("  CpuTotalPercent: ").Append(CpuTotalPercent).Append("\n");
            sb.Append("  CpuHumanLabel: ").Append(CpuHumanLabel).Append("\n");
            sb.Append("  RamDataPresent: ").Append(RamDataPresent).Append("\n");
            sb.Append("  RamUsageAverageMb: ").Append(RamUsageAverageMb).Append("\n");
            sb.Append("  RamUsageAverageMbQ10: ").Append(RamUsageAverageMbQ10).Append("\n");
            sb.Append("  RamUsageAverageMbQ90: ").Append(RamUsageAverageMbQ90).Append("\n");
            sb.Append("  RamTotalAmountMb: ").Append(RamTotalAmountMb).Append("\n");
            sb.Append("  RamHumanLabel: ").Append(RamHumanLabel).Append("\n");
            sb.Append("  DiskUsedDataPresent: ").Append(DiskUsedDataPresent).Append("\n");
            sb.Append("  DiskSpaceUsedGb: ").Append(DiskSpaceUsedGb).Append("\n");
            sb.Append("  DiskSpaceUsedGbQ10: ").Append(DiskSpaceUsedGbQ10).Append("\n");
            sb.Append("  DiskSpaceUsedGbQ90: ").Append(DiskSpaceUsedGbQ90).Append("\n");
            sb.Append("  DiskSpaceTotalGb: ").Append(DiskSpaceTotalGb).Append("\n");
            sb.Append("  DiskSpaceHumanLabel: ").Append(DiskSpaceHumanLabel).Append("\n");
            sb.Append("  DiskWriteDataPresent: ").Append(DiskWriteDataPresent).Append("\n");
            sb.Append("  DiskWriteBps: ").Append(DiskWriteBps).Append("\n");
            sb.Append("  DiskWriteHuman: ").Append(DiskWriteHuman).Append("\n");
            sb.Append("  DiskWriteHumanLabel: ").Append(DiskWriteHumanLabel).Append("\n");
            sb.Append("  DiskReadDataPresent: ").Append(DiskReadDataPresent).Append("\n");
            sb.Append("  DiskReadBps: ").Append(DiskReadBps).Append("\n");
            sb.Append("  DiskReadHuman: ").Append(DiskReadHuman).Append("\n");
            sb.Append("  DiskReadHumanLabel: ").Append(DiskReadHumanLabel).Append("\n");
            sb.Append("  NetworkOutDataPresent: ").Append(NetworkOutDataPresent).Append("\n");
            sb.Append("  NetworkOutBps: ").Append(NetworkOutBps).Append("\n");
            sb.Append("  NetworkOutHuman: ").Append(NetworkOutHuman).Append("\n");
            sb.Append("  NetworkOutHumanLabel: ").Append(NetworkOutHumanLabel).Append("\n");
            sb.Append("  NetworkInDataPresent: ").Append(NetworkInDataPresent).Append("\n");
            sb.Append("  NetworkInBps: ").Append(NetworkInBps).Append("\n");
            sb.Append("  NetworkInHuman: ").Append(NetworkInHuman).Append("\n");
            sb.Append("  NetworkInHumanLabel: ").Append(NetworkInHumanLabel).Append("\n");
            sb.Append("  IsShownShort: ").Append(IsShownShort).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
